<template>
 <v-container fluid> 
  <v-expansion-panels rounded class="ma-2 pa-4 long-line">
    <v-expansion-panel>

     <v-expansion-panel-header  color="green">
      
        <h1>Score Adding Function</h1>
      
     </v-expansion-panel-header>
    <v-expansion-panel-content>
      <p>Enter the tasteid, and at least two scores. And press the add score button.<br>The scores will 
      appear in the table below the button. Once you have entered a few scores, check them and the press
      the commit button to save them to the server. <i>Remember</i> No scores are saved until you press
      the COMMIT button. You can export your scores to excel via the export button.
      <br>You can edit or delete the scores before committing.
      <br>tasteid must be between 1 and 3000 and scores between 11 and 99
      <br>
      <br>Judges are optional, and fields will not be cleared.
      </p>
    </v-expansion-panel-content>
    </v-expansion-panel>
  </v-expansion-panels>

   <v-row>
    <v-col cols="12" md="3">
     <v-text-field v-model="w_tasteid" label="tasteid" type="number" dense outlined rounded shaped />
    </v-col>
    <v-col cols="6" md="2">
     <v-text-field v-model="w_score1" label="Score 1" type="number"  dense outlined rounded shaped/>
    </v-col>
    <v-col cols="6" md="2">
     <v-text-field v-model="w_score2" label="Score 2" type="number"  dense outlined rounded shaped/>
    </v-col>
    <v-col cols="6" md="2">
     <v-text-field v-model="w_score3" label="Score 3" type="number"  dense outlined rounded shaped/>
    </v-col>
    <v-col cols="6" md="2">
     <v-text-field v-model="w_score4" label="Score 4" type="number"  dense outlined rounded shaped/>
    </v-col>
   </v-row>
   <v-row>
    <v-col cols="12" md="3">
    </v-col>
    <v-col cols="6" md="2">
      <v-select dense
                  v-model="w_judge[0]"
                  :items="judges"
                  item-text="name"
                  item-value="id"
                  label="Judge 1"
                  outlined rounded shaped />        
    </v-col>
    <v-col cols="6" md="2">
      <v-select dense
                  v-model="w_judge[1]"
                  :items="judges"
                  item-text="name"
                  item-value="id"
                  label="Judge 2"
                  outlined rounded shaped />        
    </v-col>
    <v-col cols="6" md="2">
      <v-select dense
                  v-model="w_judge[2]"
                  :items="judges"
                  item-text="name"
                  item-value="id"
                  label="Judge 3"
                  outlined rounded shaped />        

    </v-col>
    <v-col cols="6" md="2">
      <v-select dense
                  v-model="w_judge[3]"
                  :items="judges"
                  item-text="name"
                  item-value="id"
                  label="Judge 4"
                  outlined rounded shaped />        
    </v-col>
   </v-row>

   <v-row class="ma-6">
     <v-btn class="ma-2 pa-2" @click="addScore"> Add Score </v-btn>
     <v-spacer />
     <v-btn class="ma-2 pa-2" @click="updScore"> Upd Score </v-btn>
   </v-row>
   



<!-------------------TABLE------------------------------------------>
   <v-row>
       <v-col cols="12">
         <v-card  elevation-6>
           <v-data-table v-if="entityTable.length"
                 :headers="entityTableHeader"
                 :items="entityTableFilter"
                 :items-per-page="10"
                 :footer-props="{
                    'items-per-page-options': [10, 20, 30, 40, 50]
                  }"
                 @click:row="clickOnTableRow"
           >
           <template v-slot:item="row">
          <tr>
            <td>{{row.item.tasteid}}</td>
            <td>{{row.item.score1}}</td>
            <td>{{row.item.score2}}</td>
            <td>{{row.item.score3}}</td>
            <td>{{row.item.score4}}</td>
            <td>
                <v-btn class="mx-2" fab dark small color="gray" @click="deleteScore(row.item)">
                    <v-icon dark>mdi-delete</v-icon>
                </v-btn>
                <v-btn class="mx-2" fab dark small color="blue" @click="clickOnTableRow(row.item)">
                    <v-icon dark>mdi-circle-edit-outline</v-icon>
                </v-btn>

            </td>
          </tr>
           </template>
           </v-data-table>
         </v-card>
       </v-col>
   </v-row>
<!------------------EXPORT------------------------------------------->
   <v-card cols="12" class="row wrap text-center d-flex justify-space-between ma-0 mb-2">
      <v-btn class="ma-2" @click="showTablePrint = true"> Export </v-btn>
    </v-card>   
   {{ w_judge }}  --- {{ entityTable }}
<!------------------EXPORT------------------------------------------->
  <v-dialog v-model="showTablePrint" width="auto" :fullscreen="$vuetify.breakpoint.smAndDown">
   <front-json-to-csv v-if="entityTable"
                   :json-data="entityTableFilter"
                   :csv-title="'Michelangelo Scores Export'"
                   @hideModal="showTablePrint = false">
    <v-btn>
      Download with custom title
    </v-btn> 
   </front-json-to-csv>
  </v-dialog>
<!------------------------------------------------------------->  
 </v-container>   
</template>

<script>
import { tableWork } from "@/components/TableFilter.js"
import FrontJsonToCsv from '@/api/csv/FrontJsonToCsv.vue'
import { errorSnackbar, infoSnackbar } from "@/api/GlobalActions"

export default {
  name: "TableJudge",
  props: ['entity'],
  components: {FrontJsonToCsv},
  data: () => ({
   showTablePrint:false,    
   w_tasteid:null,
   w_score:[],
   w_score1:null,
   w_score2:null,
   w_score3:null,
   w_score4:null,
   w_judge:[],
   judges:[{id:1, name:'Werner'},{id:2, name:'Alisa'},{id:3, name:'Pierre'}],
   entityTable:[],
      entityTableHeader:[
           { text: 'Taste id', value: 'tasteid' , align: 'start'}
          ,{ text: 'Score 1', value: 'score1' }
          ,{ text: '2', value: 'score2' }
          ,{ text: '3', value: 'score3'}
          ,{ text: '4', value: 'score4'}
      ],
      editTable:{tasteid:'',score1:0,score2:0,score3:0,score4:0, add:1},

  }),
  computed: {
      entityTableFilter() {
        //If the table is empty - return blank
        if (!this.entityTable.length) return [];
        return this.entityTable
      }
  },
  methods: {
    deleteScore(item) {
      console.log('to be deleted : ' ,item)
      let index = this.entityTable.findIndex(ele => ele.tasteid == item.tasteid)
      if (index == -1) {
        errorSnackbar('item not found for deletion', index)
        return
      }
      this.entityTable.splice(index,1);

    },
    updScore(item) {
      console.log('to be updated : ', this.w_tasteid, item)
      let index = this.entityTable.findIndex(ele => ele.tasteid == this.w_tasteid)
      if (index == -1) {
        errorSnackbar('item not found for updating', index)
        return
      }
      this.entityTable[index].score1 = this.w_score1
      this.entityTable[index].score2 = this.w_score2
      this.entityTable[index].score3 = this.w_score3
      this.entityTable[index].score4 = this.w_score4
                       

    },
    addScore(){
      let index = this.entityTable.findIndex(ele => ele.tasteid == this.w_tasteid)
      if (index !== -1) {
        errorSnackbar('item already in our list - click on update : ' + this.w_tasteid)
        return
      }      
      let err = ''
      if (this.w_tasteid < 1 || this.w_tasteid > 3999) err = 'Taste ID must be between 1 and 3999'
      if (!err && (this.w_score1 < 10 || this.w_score1 > 99)) err = 'Score 1 must be between 10 and 99'
      if (!err && (this.w_score2 < 10 || this.w_score2 > 99)) err = 'Score 2 must be between 10 and 99'
      if (!err && (this.w_score3 > 99)) err = 'Score 3 must be below 100'
      if (!err && (this.w_score4 > 99)) err = 'Score 4 must be below 100'
      if (err) {
        errorSnackbar(err)
        return
      }
      this.editTable = {id:0,tasteid:this.w_tasteid
                       ,score1:this.w_score1
                       ,score2:this.w_score2
                       ,score3:this.w_score3||0
                       ,score4:this.w_score4||0
                       }
      this.entityTable.push(this.editTable)
      this.w_tasteid = ''; this.w_score1 = ''; this.w_score2 = ''; this.w_score3 = ''; this.w_score4 = ''; 
      infoSnackbar('Score Added')
      this.$playSound()
      
    },
    clickOnTableRow(p1) {
          console.log('click = ', p1)
          let index = this.entityTable.findIndex(ele => ele.tasteid == p1.tasteid)
          console.log('index = ', index)
          this.editTable = this.entityTable[index]
          this.w_tasteid = this.editTable.tasteid
          this.w_score1  = this.editTable.score1
          this.w_score2  = this.editTable.score2
          this.w_score3  = this.editTable.score3
          this.w_score4  = this.editTable.score4
    },
  },  
  mounted() {
     console.log('Start' , this.$options.name)
     tableWork.hello('from ' + this.$options.name)
     this.$playSound('img/ice-cubes-glass-daniel_simon.mp3')
  }
}
</script>
