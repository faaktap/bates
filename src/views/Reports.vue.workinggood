<template>
<v-container fluid>
 <v-card>
    <v-toolbar
      color="cyan"
      dark
      flat
    >
    <v-toolbar-title>Your Reports</v-toolbar-title>
     <v-spacer></v-spacer>
     <template v-slot:extension>
        <v-tabs
          v-model="tab"
          align-with-title
        >
          <v-tabs-slider color="yellow"></v-tabs-slider>

          <v-tab v-for="item in items" :key="item.id">
            {{ item.menu }}
          </v-tab>
        </v-tabs>
     </template>
    </v-toolbar>

    <v-tabs-items v-model="tab">
      <v-tab-item v-for="item in items" :key="item.id" :href="item.id">
        <v-card flat>
          <v-card-actions>
            <template v-if="tab == 0">
               <z-auto-place v-model="reportValueToCount[rPlace]"
                label="Place" />
            </template>
            <template v-else-if="tab == 1">
              <z-auto-pers v-model="reportValueToCount[rOwner]"
                  label="Owner" />
            </template>
            <template v-else>
              <z-auto-item-type v-model="reportValueToCount[rItemType]"
                  label="Item Type" />
            </template>
          </v-card-actions>
          <v-card-title>
            {{ item.answer }}
          </v-card-title>
          <v-card-actions>
            <v-btn small @click="build"> Build </v-btn>
          </v-card-actions>
        </v-card>
      </v-tab-item>
    </v-tabs-items>
  </v-card>
  <reports-table v-if="sqlSelect"
     :tableHeader="sqlHeader"
     :sqlSelect="sqlSelect"
     />
</v-container>
</template>

<script>
import ZAutoPers from '@/components/fields/ZAutoPers.vue'
import ZAutoPlace from '@/components/fields/ZAutoPlace.vue'
import ZAutoItemType from '@/components/fields/ZAutoItemType.vue'
import ReportsTable from './ReportsTable.vue'
import { zmlFetch } from '@/api/zmlFetch.js'
export default {
  name: 'Report',
  components:{
    ZAutoPers,
    ZAutoPlace,
    ZAutoItemType,
    ReportsTable
  },
  data: () => ({
    show: false,
    tab:null,
    items: [
          {id:0,menu:'List for a Class' ,f:null
               ,sql:"SELECT count(*) items from s_stock s WHERE s.placeid = "
               ,answer:'select a class'},
          {id:1,menu:'List for a person',f:null
               ,sql:"SELECT count(*) items from s_stock s WHERE s.originalownerid = "
               ,answer:'select a person'},
          {id:2,menu:'List for an item' ,f:null
               ,sql:"SELECT count(*) items from s_stock s WHERE s.typeid = "
               ,answer:'select an item'}
        ],
    reportValueToCount:[],
    rOwner: 1,
    rPlace: 0,
    rItemType: 2,
    sqlSelect:null,
    sqlHeader: [{value:'name',text: 'name'}]

  }),
  computed:{
  },
  methods: {
    getCount() {
      let ts = {}
      ts.task = 'PlainSql'
      // assign the sql with 'placeid =' to sql, and add the id
      ts.sql = `${this.items[this.tab].sql} ${this.reportValueToCount[this.tab]}`
      zmlFetch(ts, this.showCount)
    },

    selOwner() {
      let ts = {}
      ts.task = 'PlainSql'
      ts.sql = `SELECT count(*) items from s_stock s WHERE s.originalownerid = ${this.reportValueToCount[this.rOwner]}`
      zmlFetch(ts, this.showCount)
    },
    selPlace() {
      let ts = {}
      ts.task = 'PlainSql'
      ts.sql = `SELECT count(*) items from s_stock s WHERE s.placeid = ${this.reportValueToCount[this.rPlace]}`
      zmlFetch(ts, this.showCount)
    },
    selItemType() {
      let ts = {}
      ts.task = 'PlainSql'
      ts.sql = `SELECT count(*) items from s_stock s WHERE s.typeid = ${this.reportValueToCount[this.rItemType]}`
      zmlFetch(ts, this.showCount)
    },
    showCount(response) {
      console.log('showCount start')
      this.items[this.tab].answer = `For ${this.reportValueToCount[this.tab]} we have ${response[0].items} items found`
      console.log('tab = ', this.tab, 'count = ', response[0], this.items[this.tab].answer)
    },
    build(u) {
      console.log('build base on this.tab',u)
      if (this.tab == 0) {
         this.sqlSelect = 'select * from s_category'
         this.sqlHeader =  [{text: 'name',value:'name'},{text: 'id',value:'catid'}]
      } else {
         this.sqlSelect = 'select catid, name, description from s_category'
         this.sqlHeader =  [{text: 'name',value:'name'}
                           ,{text: 'id',value:'catid'}
                           ,{text: 'desc',value:'description'}]

      }
    },

  },
  mounted() {
    // this.items[0].f = this.selPlace
    // this.items[1].f = this.selOwner
    // this.items[2].f = this.selItemType
    this.items.forEach( e => e.f = this.getCount)
  },
  watch:{
    tab() {
      console.log('new tab = ', this.tab)
    },
    reportValueToCount() {
      this.items[this.tab].f()
    },

  }
}
</script>

<style scoped>

.fade-enter-active,
.fade-leave-active {
  transition-duration: 3s;
  transition-property: opacity;
  transition-timing-function: ease;
}
.fade-enter,
.fade-enter-active {
  transition: all 3s ease;
}

.v-carousel .v-window-item {
  position: absolute;
  top: 0;
  width: 100%;
}
</style>